#include "lgparser.h"

#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <string>
#include <iterator>
#include <map>
#include <set>
#include <string>
#include <regex>


C_lgParser::C_lgParser()
{
    memset(&m_Adapters, 0, sizeof(AdapterInfo));
    m_TdrLevel = TdrLevelUndefined; // whatever, don't care, we will make sure to assign the value to it

}


C_lgParser::~C_lgParser()
{

}

bool C_lgParser::parser(const char* arg)
{
    std::string file1 = arg;
    std::istringstream iss(file1);

    std::string line;
    
    size_t po = -1;
    while (std::getline(iss, line))
    {
        // check TDR level setting of the target
        if(  (po=line.find("TdrLevel : TdrLevelBugcheck (0n1)")) != -1  )
        {
            m_TdrLevel = TdrLevelBugcheck;
        }
        else if ((po = line.find("TdrLevel : TdrLevelOff (0n0)")) != -1)
        {
            m_TdrLevel = TdrLevelOff;
        }
        else if ((po = line.find("TdrLevel : Tdr")) != -1)
        {
            // i don't care other now
        }
        if(po != -1)
            break;
    }


    m_TempAdapterIndex = 0;
    while (std::getline(iss, line))
    {
        // find each adapter's fence Info
        // Adapter 0
        const std::regex base_regex("Adapter ([0-9])");
        std::smatch base_match;

        if (std::regex_match(line, base_match, base_regex))
        {
            // The first sub_match is the whole string; the next
            // sub_match is the first parenthesized expression.
            if (base_match.size() == 2)
            {
                std::ssub_match base_sub_match = base_match[1];
                m_TempAdapterIndex = std::stoi(base_sub_match.str());
                continue;
            }
        }

        extractFenceID(line.c_str(), "| Last generated by VidSch |", vidschGen);
        
    }
    
    return true;
}

bool C_lgParser::extractFenceID(const char* arg, const char* searchstr, FenceType ft)
{
    std::string line(arg);
    size_t pos = line.find(searchstr);
    size_t pos1 = -1;
    size_t engineIdex = 0;
    if (pos != -1)
    {
        unsigned int n;
        std::string subs;
        do
        {
            pos = line.find(" |", pos);
            pos1 = line.find(" |", pos + 2);
            if (pos1 != -1)
            {
                subs = line.substr(pos + 2, pos1 - pos - 2);
                subs.erase(std::remove_if(subs.begin(), subs.end(), isspace), subs.end());

                std::istringstream(subs) >> std::hex >> n;
                m_Adapters[m_TempAdapterIndex].engineInfo->fenceInfo[ft] = n;
            }
            pos = pos1;
        } while (pos != -1);
    }
    return true;
}